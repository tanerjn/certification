AWS DevOps Pro(Dumpsgate-2)

- Artefacts: Publish the application artefacts to an Amazon S3 bucket, create VPC endpoint for S3. Assign IAM profile to the EC2 instances so they can read the application artefacts from the S3 bucket.
- Patching: System Manager Parameter Store to securely store credentials for each Linux and Windows server. System Manager Resource Group to remotely deploy patch updates using Parameter Store.
- Logging: Kinesis Firehose + Kinesis Data Streams to write logs to Amazon ES in the auditing account. Create CloudWatch subscription filter and stream logs from sub accounts to the Kinesis stream in the auditing account.
- Grid memory: Adding new nodes /etc/cluster/nodes.config listing the IP addresses of current mode. OpsWorks stacks to layer the server nodes of the cluster. Chef recipe that populates the content of the /etc/cluster/nodes.config file and restarts the service by using the current members of the layer. Assign the recipe to the Configure lifecycle event.
- Tagging and configuration: AWS Config record config changes and output the data to S3 bucket. QuickSight analysis of the dataset, and use the information on dashboards and mobile devices.
- EC2 ASG automation: Cloud Watch Logs subscription in an Lambda function. Configure the function to add a tag to the EC2 instance that produced the login event and mark the instance to be decommissioned. CloudWatch Events rule to trigger a daily Lambda function that terminates all the instances with tag.
- Canary testing: create a classic load balancer and AutoScaling group for blue/green environments. Use Amazon Route 53 and create weighted A records on Classic Load Balancer.
- Across multiple AZ: use Aurora with read replicas for the product catalog and additional local Aurora instances in each region for the customer information and purchases.
- Audit cost and automate infrastructure:  create CloudWatch events rule with Trusted Advisor as the source for low utilisation EC2 instances. Trigger Lambda function that filters out reported data based on tags for each team, environment, cost and store the Lambda function in S3. Set up second trigger to initiate Lambda function to reduce to underutilised instances. 
- Hybrid architecture solution in which some legacy systems remain on-premises while a specific cluster of servers moved to AWS. Reusable CloudFormation to manage EC2 ASG minimum 1 and maximum 1. Give the hostname Elastic Network Interface and AZ as stack parameter. 
- New tasks are running with old image: Restart the ECS agent.
- Security hardened AMI: Install the inspector agent in each AMI. Configure AWS Step functions to launch an EC2 instance for each operating system from the hardened AMI, tag the instance SecurityCheck:True. Once the instances are booted StepFunctions will trigger Inspector assessment for all instances with the tag security check.
- Restrict the push: Additional policy to include a deny rule for the codeCommit:GitPush. 
- CD workflow: CodeCommit: development branch to hold merged changes. Use CodeBuild to build and test the code in the development branch triggered on a new commit. Merge to the master and deploy to  production by using CodeDeploy.
- Sudden spikes: in a website load times. Check Egress security group rules and network ACLs for the VPC, check FlowLogs.
- Resilient and highly available: Elastic Beanstalk with a custom AMI including all web components. Deploy the platform by using an AutoScaling group behind AutoScaling. Use Route53 to point the application DNS record to the Elastic Beanstalk load balancer.
    - Remove AWS credentials from the environment variable.
    - Store DB_PASSWORD at safe. 
    - Use Systems Manager run command versus scp and ssh directly to the instance.
- Minimal operational effort: Implement Lambda function to read the list of proxy IP addresses from the S3 object.
- Implement Lambda function to read the list of proxy IP addresses from the S3 object and update the ELB security group to allow HTTPS only from the given IP addresses.
- Configure the S3 bucket to invoke the lambda function when the object is updated. Save the IP address list to the S3 bucket when they are changed.
- CodePipeline automation: All rejected or failed approval actions across all the pipelines.
- Launch ec2 m4 small and run script on it to check for new AMIs. If new AMIs are available, the script should update the launch configuration resource block with the new AMI ID.
- Launch the application from the CloudFormation template in the second region, which sets the capacity of the ASG group to 1. Create RDS read replica in the second region. In the second region, enable cross region replication between the original S3 bucket and a new S3 bucket. To fail over, promote the read replica as master. Update the CloudFormation stack and increase the capacity of the ASG.
- Run the application in Beanstalk with the deployment policy set to immutable. Deploy the lambda functions, DynamoDB tables, and Amazon ES domain with an CloudFormation template. Deploy the web application, Lambda functions, DynamoDB tables and Amazon ES domain in an AWS CloudFormation template. Deploy changes with an CodeDeploy blue/green deployment. 
- Media customer: least amount of steps to integrate with Slack. Integrate personal health dashboard with CloudWatch events which can invoke Lambda functions and send to Slack channel.
- Disaster recovery exercise: RTO / RPO improvement in cross region failover. Use SNS topics to receive published messages from RDS to snapshot a DB instance, create cross region snapshot copy and restore an instance from the snapshot. Use a scheduled Amazon CloudWatch events rule at a frequency matching the RPO trigger the Lambda function to snapshot a database instance. Trigger the Lambda function to create cross region snapshots when SNS topic receives messages. Configure Lambda function to restore an instance from a snapshot to trigger sending new messages published to the availability SNS topic.
- Security audit without EBS encrytpion: Create CloudFormation template that adds an AWS config managed rule for EBS encryption. Use a CloudFormation stack set to deploy the template across all accounts and regions. Store consolidated evaluation results from config rules in S3. Send notification using SNS when non-compliant resources are detected.
- Shipping orders dynamoDB. Item count to Kinesis. Logs-> Lambda functions are throttling error. Create fourth Lambda function and configure it to be the only Lambda reading from the stream. Then use it to pass the payload to the other three Lambda functions.
- Government agency storing confidential files in S3 bucket. Agency has configured federated access with AD user group to this bucket: Configure AWS Config rule to detect the configuration change and execute a Lambda to revert the change.
- Healthcare provider has hybrid architecture: includes 120 on-premise VMware running RedHat and 50 EC2 instances. Install Systems Manager agents on both the on-premises virtual machines and the EC2 instances. Enable inventory collection and configure resource data sync to an S3 bucket to analyse the data with Athena.
- Download and integrate the latest ISO Linux2 and execute the application deployment on the resulting server. Confirm all tests are consistent.
- Deployment in the new country: Code updates as commits to feature branch. Merge the commits to a release branch as features ready.
- Deploy with zero downtime: CloudFormation and Route53 record, ALB, DynamoDB, ASG. Active instance serving: AutoScaling:AutoScalingGroup:UpdatePolicy attribute with zero downtime policy. New application load balancer and AutoScaling group. Use route 53 to change the active ALB.
- AMI creation: Launch EC2 and install packer, configure packer with values defining how the image should be created. Build Jenkins pipeline to invoke the Packer build when triggered to build an AMI store. Store the AMI identification output in the DynamoDB.
- Requests are going to old ALB. Create two target groups named Blue and Green . Create a rule on the ALB pointed to a single target. Add logic to the deployment to the target group of the newly deployed ASG.
- Microservices running in Lambda read data from DynamoDB. New version of each service should be shifted incrementally. Create CodePipeline config and set up source code step to trigger when code is pushed. Set up build step to use CodeBuild to run tests, then the important CodeDeploy 10 percent every 3 minutes option.
- Production, staging and development. CodePipeline multiple stages, Lambda function to trigger CloudFormation deployments dynamically alter the UserData of the EC2 instances launched in each environment.
- Application runs behind LoadBalancer. RDS MySQL. 
- RTO/RPO improvement: Launch a replica stack of everything except RDS in different region. Create an RDS in new region and configure the new stack to the point the local RDS instance. Add new route to failover set.
- Subject as the primary key and ForumName)S3, EC2, RDS) as the sort key. Have the LSI and LastPostDate as the sort key.
- CloudFormation to deploy a three tier web application stores data in RDS MySQL Multi AZ instance. Engineer should update the EngineVersion property of the AWS::RDS::DBInstance resource type in the CloudFormation template to the latest desired version. Launch a second stack and make the new RDS  instance read replica.
- OpsWorks restarting instances for no reason: Create SNS topic and create subscription for this topic that contains the destination email address. See when the instance is unavailable: Create CloudWatch rule: specify aws.opsworks as a source and specify auto-healing the initiated-by details. Use SNS topic as target.
- Least administrative overhead: AWS Config: Identify all EC2 instances to be audited by ConfigRecording on all EC2 resources for the region. Create custom Config rule that triggers an Lambda function by using the “config-rule-change-triggered” blueprint. Modify the Lambda evaluateCompliance function to verify host placement to return a NON_COMPLIANT result if the instance is not running on an EC2 dedicated host. Use AWS Config to report to address noncompliant instances.
- S3 buckets contain encrypted secrets should be made by a trusted group of admins. Real-time automated checks to meet the requierement. Lambda triggered by S3 data events for object changes and the IAM user’s membership in an admin role.
- 5 independent Lambda functions in CodePipeline and CodeBuild deploys each Lambda in sequence. CloudWatch events ensure execution starts as quickly as possible after a change is made. Increase speed: Lambda function in parallel by runOrder.
- Version control of the CloudFormation: cross stack references in CloudFormation, and maintain several templates in version control.
- Easy rollbacks: Deploy using Beanstalk, connect to an external RDS MySQL using Beanstalk environment properties. Use Beanstalk immutable updates for application deployments.
- Error at S3 bucket read: Access denied at VPC: S3 bucket policy, VPC endpoint policy, IAM role configuration.
- Segmented architecture: Collect system Logs and application logs by using CloudWatch logs agent. Store all logs in S3 bucket in central account. Set up an S3 trigger and an Lambda function to analyse incoming logs and automatically identify anomalies. Amazon Athena to run ad hoc queries on the logs in the central account. Question 46
- CloudWatch logs to trigger lambda function. S3 analyse incoming logs. Athena to run queries in the log.
- Canary 10 percent in 5 minutes
- CodeDeploy MinimumHealthyHosts.
- SystemManager for Windows machines: IAM service role for Systemmanager ssm.amazonaws.com to execute AssumeRole. Previously obtained activation code and activation IDS, download and install SSM Agent Hybrid instances show with -mi prefix. 
- DNS failover for distributed web application disaster recovery. Configure Route 53 to provide DNS routing. Ensure firewall and routing rules, proxy. Governing amazon route set it to failover distribute traffic DNS entries. 
- ECS Cluster: awslogs, ALB to point S3, Kinesis Firehose to destination CloudWatch subscription.
- ECS Cluster to run workloads on the cluster with ALB on the front end, using multiple target groups. Collect logs and send to S3 bucket. Install CloudWatch logs logging on the ECs instances, change logging to awslogs. Enable access loging on the ALB and point it directly to  S3 logging. Create Kinesis Firehose with destination S3.
- CodeDeploy CloudWatch events rule to send SNS message when deployment fails. CodeDeploy to automatically rollback when the deployment fails.
- Launch EC2 instances with an EC2 IAM role to access AWS services. Retrieve the DB credentials from Secrets Manager.
- Deployment Strategy: Preconfigure the AMI by installing all the software using Systems Manager and configure Auto Scaling tag the instances at launch with their specific environment. Use a bootstrap script in user data to read the tags and configure for the environment. Use Systems Manager Store for the secrets using KMS.
- ELB check instance termination: AutoScaling lifecycle hooks to put instances in a Terminating:Wait state. Create an CloudWatch Events rule for EC2 instance terminate lifecycle action.
- Use DynamoDB accelerator to cache repeated read requests to DynamoDB and Amazon CloudFront to cache images stored in S3.
- 200 server nodes concurrently: upload licences to DynamoDB. Create script to launch the servers by using the parameter —count, with min:max instances to launch. In the user data script, acquire an available license from the DynamoDB table, monitor each instance and in case of failure replace the instance and manually update the DynamoDB.
- Static website on S3: Deletion has failed bec. S3 bucket is not empty. Modify custom resources Lambda function code to recursively empty the bucket when RequestType is Delete.
- Deploy to multiple regions. Any update to the code repo triggers two stage build and deployment pipeline. One region successful deployment invokes the lambda function to copy the build artefacts to an S3 bucket in another region. After the arfefact is copied it triggers a deployment pipeline in the new region.
- Create alias for lambda pointing to the Lambda endpoints for the old and new versions. Configure route 53 to route %10 of incoming traffic to the new version. New version becomes stable-> update the alias to route all traffic to the new one. API GW, create canary release deployment by adding canary settings to the stage of a regular deployment. Configure API GW to route %10 of the incoming traffic to the canary release. Canary release gets stable->promote it to production.
- Security code analysis: CodePipeline to create a pipeline then create a custom action type. Create job worker for the on premises server that polls CodePipeline for job requests initiates the tests and returns the results. Configure the pipeline to invoke the custom action after the source stage.
- Apache app to CodeDeploy env var DEPLOYMENT_GROUP_NAME configure log level settings reference script BeforeInstall lifecycle. 
- Chef recipes stored in private git: Configure OpsWorks stacks and use custom Chef cookbooks. Add layer in OpsWorks for the Node.js application. Configure time based instances and attach an EC2 IAM role to access DynamoDB. 
- CloudWatch logs+access logging  agent on the ECS, change logging to awslogs, kinesis firehose with a destination of the S# logging bucket, CloudWatch subscription for Kinesis.
53:
- Rollbakc: : CloudWatch event rules or CodeDeploy operations. Configure rule to send out SNS messagewhen the deployment fails. Configure CodeDeploy to auto rollback.
54:
- Obtain pass: from Oracle, DynamoDB : Launch EC2 instaces with an EC2 IAM role access AWS services. Retrieve the DB from Secrets Manager.

55: 
- Minimize startup time: Allow AMI to work at multiple places. Store secrets for multiple environments securely. Preconfigure the AMI by installing all the software using Systems Manager automation and configure AutoScaling to tag the instances at launch with their specific environment. Use bootstap scrip in user data to read the tags and configure settings for the environment. Use System Manager Parameter Score to store the secrets using KMS.

56: EC2 servers: ASG and ELB. Some instances are failing ELB HTTP checks.Root cause analysis on the issue: Terminating: Wait state. Amazon CloudWatch events rule for EC2 Instance-terminate Lifecycle Action and trigger AWS Lambda function that executes SSM Run Command script to collect logs push them to S3.


57: Use DynamoDB Accelerator for duplicate info, CloudFrnt send to s3

200 server nodes concurrently run: Licences + Dashboard: Update licences at Dynamo table, create AWS CLI script to launch the servers by using the parameter count with min:max instances to launch. In the data script, acquire an available license from Dynamo table. Monitor instance, in case of failure replace and manually update DynamoDB table.

Static website hosted on S3 bucket. CloudFormation to choose s3 bucket custom resource that copies content from source into the bucket. Deletion has failed bec. S3 bucket is not empty. Modify Lambda function to recursively empty the bucket.

58: Mobile game: Deploy application backend to multiple regions. 2 stage build: Successful deploy in one region invokes Lambda to copy the build artifacts to S3 bucket. After the artifact is copied it triggers a deployment pipeline in other region.

59: Alias for the Lambda function current and new versions. Configure alias to route %10 of the traffic to the new version. When the new version becomes stable, route all traffic to the new app.
 In API GW create canary deployment. Configure API GW to route %10 of the incoming traffic to Canary release. When the canary is stable promoto it to a production.

60: Use AWS CodePipeline to create a pipeline. Add a step after the source stage to make an HTTPS request to the on-premises hosted web service send the results back y putting the results in an S3 output location.

61: Use AWS CodePipeline to create a pipeline, then create a custom action type. Create a job worker for the on-premises server that polls CodePipeline for job results. Configure the pipeline to invoke the custom action after the source stage.

62: CodeDeploy custom environment variable  DEPLOYMENT_GROUP_NAME to identify which deployment group the instances is partof. Use the information to configure the log settings. Refereance the script as part of BeforeInstall lifecycle hook in the appspec.yml.

63: Predictable peak traffic times. Instances to scale up only peak times. Standort Node.js application. Configure OpsWorks stacks and custom Chef cookbooks. Git repo info. Custom recipe to deploy application in steps. Configure time based instances and attach an EC2 IAM role that provides permission to access DynamoDB.

64: Health dashboard: AWS Health API to automate remediation actions for issues with the health of AWS. Delete IAM access key and send notification to the security team: Step functions to delete the IAM key then use SNS to send notificcation to the security team. Create CloudWatch Events rule with an aws.health event source and the AWS_RISK_CREDENTIALS_EXPOSED event; set the target to CloudWatch events.

65: Security team depends on CloudTrail to detect sensitive isses in the copany's account. Auto-remediate CloudTrail turned off: CloudWatch Events rule fo the CloudTrail StopLogging event. Lambda function that uses the SDK to call StartLoggin on the resource in which StopLogging was called. Add the Lambda function ARN as a target to the CloudWatch Events rule.

66: CloudTrail files are not tampered with after being created. IAM to restric access to specific trails. Security team wants to ensure they can trace the integrity of each file and make sure there is no tampering. Enable CloudTrail file integrity feature. Use the digest file created by CloudTrail to verify the integrity.

67: Serverless architecture for mobile and web apps with API gateway. Fully automate the deployment based on the CodeCommit. 

1. Seperate environment pipelines for testing and production.
2. Automatic deployment that occurs for test environments only.

Two CodePipeline for test and production environments. Configureproduction pipeline to have manual approval step. Create CodeCommit with a branch for each environment. Set up each CodePipeline to retrivethe source code from the appropriate branch in the repository. Set up the deployment step to deploy the Lambda functions with CloudFormation.

68: Test action after the last deploy action of the pipeline. configure the action to use CodeBuild to perform the reqired tests. if tests are succesfil, mark the acion as successfil. Add manual approval action uses SNS to notify the team over slack SNS.

69: Data must be encrypted in transit: 
	Data must be replicated in at least two locations that are 500 miles apart.

	Primary and secondary S3 buckets in seperate regions 500 miles apart. Use IAM role to enforce access to the buckets only through HTTPS. Use bucket policy to enforce S3 managed keys(SSE-S3) on all objects uploaded to the bucket. Configure cross region replication between the two buckets.

70: Use Application Load Balancer and blue/green deployment. Associate the ASG and target deployment group with. Automatically copy Auto Scaling group, use CodeDeployDefault.HalfAtTime as the deployment configuration. Use AppSpec.yml file to delete temporary files. Use BeforeAllowTraffic to see if green deployment works.

71: 12 instances across 3 availability zones. New instances can be started from AMI image. Each E2 instance has 30% utilisation during business hours %10 after business hours. Immediate spike at first business hours. Reduce cost while retaining the same reliability.

Create ASG using the AMI image with a scaling action based on the ASG CPU utilisation with a target of %75. Create a scheduled action for the group to adjust the minimum number of instances to three after business hours and reset to 6 during business hours.

72. Finance team transactions for an e-commerce platform handled by the Microservices on multiple EC2 instances. We should know the requests falls below a threshold. Solution: Have the team successfully log transactions to an application log. Set up the CloudWatch agent on each instance, create CloudWatch alarm when the threshold is breached, Use SNS to notify the team.
73. Migrating application to AWS runs on single EC2. DB: Aurora. CloudWatch events rule to trigger an AWS Lambda function to start a new EC2 instance in an available AZ when the instance status reaches a failure state. Create Aurora DB with read replica in a second AZ and promote it to a primary DB when the primary DB fails.
74. 3 environments: Development, pre-production production. Several misconfigured and nonfunctional code into production resulting in user disruption and downtime. Functional issues during deployment process: 1. CodeBuild to add a test action to the pipeline to replicate user activities and ensure results. Add CodeDeploy action in the pipeline to deploy the latest version of the development code t preproduction. Manual approval action in the pipeline so that the QA team can test and confirm the expected functionality. After the manual approval-> second CodeDeploy action that deploys the approved code to the production environment.
75. PHP application hybrid deployment, CodeDeploy to deploy application packages to the instances. Store DB credentials on AWS Systems Manager Parameter store, Secure String data type. Define IAM policy for allowing access and decrypt only the database credentials. Attach IAM policy to the role associated to the instance profile for CodeDeploy managed instance, and to the role used for on-premise instance registration.
76. Create CodeCommit repository for each project, use the master branch for production code and create testing branch for code deployed to testing. Use feature branches to develop new features and pull requests to merge code to testing and master branches.
77. Create AWS CodePipeline that pulls code from the CodeCommit repository. Create alpha, beta and production stages with Jenkins servers.
78. EC2 AutoScaling extensively to provide an excellent customer experience while minimising the number of running EC2 instances. Self-hosted Puppet environment in the application layer manages the configuration of the instances. IT manager wants the lowest licensing costs, wants to ensure that whenever the EC2 AutoScaling group scales down, removed EC2 are deregistered from Puppet master. Instance launch time, use EC2 data to deploy the AWS CodeDeploy agent. Use CodeDeploy to install Puppet agent. When ASG scales out, run a script to register the newly deployed instances to the Puppet master. When the ASG scales in, use the EC2 AutoScaling E2_INSTANCE_TERMINATING lifecycle hook to trigger reregistration from the Puppet master.
79. Customers storing AWS Access Keys in the configuration files pushed to Git repo hosting service. Configure Trusted Advisor and create CloudWatch events that uses Trusted Advisor as the event source. Configure CloudWatch Events rules to invoke a Lambda function as the target. If the Lambda function finds the exposed access keys, then have it disable the access key so that it can not be used.
80. Flow log for the production VPC. Create a new rule using AWS Config that is triggered by configuration changes of resources of type ‘EC2:VPC’. As part of configuring the rule, create an AWS Lambda function that looks up flow logs for a given VPC. If the VPC flow logs are not configured, return a ‘NON_COMPLIANT’ status and notify the security organisation.
81. DevOps Engineer needs to deploy scalable three-tier Node.js application in AWS. The application must have zero downtime during deployments and rollback easily to previous versions. Other applications will also connect to the same MySQL backend database. CIO has provided the guidance for logging. View all current web access server logs, search and filter web and application logs in real time, retain log data for 3 months: Deploy the authentication using Beanstalk, configure the environment type for Elastic Load Balancing and Auto Scaling. Create MySQL instance outside the Elastic Beanstalk stack. Configure the Elastic Beanstalk log options to stream logs to CloudWatch logs. Set retention for 90 days.
82. CloudFormation template: Custom resource when Lambda function with the DependsOn attribute specifying the S3 bucket and an IAM role. Write the Lambda function to delete all objects from the bucket when RequestType: Delete.
83. Already running workloads on EC2 instances, AWS has been adopted incrementally with no central governance. Assess how well the existing deployments comply with the following requirements: AWS Config, Amazon Inspector.
84. Critical application running in AWS Region: ELB and EC2 instances, custom AMI that contains its application. AMI is changed frequently. Automate the copying of the AMI to the backup region. Create an AWS Lambda function that can create a launch configuration and assign it to an already created AutoScaling group. Set the ASG maximum size to 0 and only increase it with the Lambda function during a failure. Trigger Lambda function in the event of a failure.
85. Legacy web application stores logs in text format. Security requirement is to search application access events and correlate them with access data from different systems. Install Kinesis Agent on the application server, configure it to monitor the log files, forward events to ES for analysis. Use ElasticSearch API for querying data.
86. DB on a single EC2 in a development environment. Data is stored on separate EBS volumes attached to EC2. Amazon Route 53A record to point EC2. Automate recovery when an instance or AZ fails. RTO:4 hours, RPO:12 hours. Run the DB on two separate EC2 instances in different AZs. Configure one of the instances as a master and the other as standby. Setup replication between master and standby. Point the Route53 record to the master. Configure an CloudWatch Events rule to invoke EC2 instance. If the terminated instance was the active node, the function promotes the standby to master and points the Route53 record to it.
87. Assess security vulnerabilities client’s application and propose plan to remediate all identified issues. S3 for storage, ASG for EC2 behind ELB with attached EBS storage and MySQL database. Also several Lambda functions communicate directly with the RDS database using connection string statements in the code. Top security threat: No encryption at rest. Enable Secure Sockets Layer(SSL) on the load balancer, ensure AWS Lambda is using SSL and configure the application to force SSL for incoming RDS connections. Configure Amazon Inspector agents on EC2 instances to report on insecure encryption ciphers.
88. Zero day vulnerability was found in OpenSSL requiring the immediate patching of a production web fleet, running on Linux. Currently, monthly OS updates are performed and deployment with ASG launch config. Use EC2 Run Command to issue a package update command to all running production instances and update the AMI for further deployments.
89. Production application workload in a single AWS account uses Route53. EBS and RDS. Security team wants the application workload to fail over to a new AWS account. Security team wants to block all access to the original account immediately, with no access to any AWS resources in the original AWS account, during forensic analysis. Most cost effective way to prepare to a failover: Migrate the Route 53 configuration to a dedicated AWS account. Mirror Beanstalk configuration in a different account. Enable RDS DB. 
90. Two teams are working together on different portions of an architecture and are using CloudFormation to manage resources. Operating System team uses CloudFormation stack to create an AWS CodePipeline that builds new AMIs. The team then places the AMI ARNs as parameter of type SSM in their CloudFormation stack to obtain the most recent AMI ARN from the Parameter Store.
91. Service limit alerts regarding the number of S3 buckets. Pipeline to reduce S3 bucket sprawl alerts: New pipelines by using the AWS API or AWS CLI, configure them to use a single S3 bucket with separate prefixes for each project.
92. Startup company is developing a web application on AWS. It plans to use RDS for persistence and deploy the application to EC2 with an ASG. Company would like to separate the environments for development, testing and production. Create a property file for each environment to include specific configuration. Create a private S3 bucket and save the property files in the bucket. Save the encrypted passwords in the AWS Systems Manager Parameter Store. Create an environment tag for the EC2 instances and tag the instances respectively. The application will read the needed property values from the environment-specific property file in the S3 bucket and the parameter store.
93. CodeDeploy across a fleet of EC2 instances in EC2 ASG group. Associated CodeDeploy which is integrated with EC2 ASG configured to perform in-place deployments with CodeDeployDefault.OneAtATime. During an ongoing new deployment, Engineer discovers 2/5 instances have the previous application deployed. Other three have the newest application revision. EC2 ASG launched two new instances while the deployment had not yet finished, causing the previous to be deployed on the affected instances.
94. Three tier web application built on single CloudFormation. Stored data in RDS MultiAZ DB instance with read replicas. Route 53 manages the public DNS. Create a workflow to mitigate a failed software deployment by rolling back changes in the production environment when a software cutover occurs for new application software. CloudFormation to deploy staging environment and configure the Route53 DNS with weighted records. During cutover, increase the weight distribution to have more traffic directed to the new staging environment as workloads are successfully validated. Keep the old production environment in place until the new staging environment handles all traffic.
95. Compromised IAM access keys from leaked and compromised IAM access keys. Identify users, revoke permission, sending notifications-> Trusted Advisor identify compromised keys. Create CloudWatch Events rule with Trusted Advisor as the event source, Lambda and SNS as target. Lambda to delete compromised IAM access keys and SNS to notify the Security team.
96. ECS Docker container: All EBS volumes and ECS cluster must be encrypted. Rolling updates will be made to the cluster instances, all instances should be drained of all tasks before termination. Copy default template that ECS uses to deploy cluster instances. Modify the template  resource EBS configuration setting to set ‘Encrypted’. ASG LifeCycle hook backed by Lambda to use the SDK to mark instance as DRAINING. Prevent lifecycle hookworm completing until the running tasks on the instance are zero.
97. Multiple AWS accounts storing sensitive information. Security team to detect anomalous account and network activities SIEM: Enable GuardDuty in every account. Configure the security account as the GuardDuty Administrator for every member account using invitation. Create CloudWatch rule in the security account to send all findings to Kinesis Firehose, push findings to the S3 bucket.
98. CodeDeploy to improve monitoring: CloudWatch Events for CodePipeline and CodeDeploy, create Lambda function to evaluate deployment issues. Create SNS topic to notify.
99. EC2 behind ALB across multiple AZs. Application stores data in RDS MySQL MultiAZ instance. Add health check to Route53, use Lambda-> CloudWatch events->Promote to RDS read replica. New Application Load Balancer and E2 ASG in the disaster recovery region. Deploy read replica of the RDS instance in the disaster recovery region.
100. EFS: Lambda with CloudWatch Events rule for scheduling the start/stop of backup activity. Run backup scripts on EC2 in ASG. Use lifecycle hooks and the SSM RUN Command on EC2 for uploading backup logs to S3. Use SNS to notify admins with backup activity metadata.
101. Fn:Import for intrinsic functions to get VPC and subnet values. CountInput to indicate the number of environments needed. Use UpdateStackSet command to update existing development environments.
102. Change the setting for the ASG group health check from EC2 to Elastic Load Balancing and increase the capacity of the group.
103. Enable AutoScaling for the DynamoDB tables that used by the application. Configure Load Balancer to automatically adjust the target group based on the current load.
104. Use extensions configure the option setting MeasureName to CPUUtilization within the aws:autoscaling:trigger namespace.
105. Query information from Beanstalk: Use CloudWatch Logs subscription to send the log data to Kinesis Data Firehose stream that has an S3 bucket destination. Use Athena to query the log data from the bucket.
106. No server side code required. Open Web Application Security Project(OWASP) to secure HTTPS response headers. S3 bucket configuration for website hosting. CloudFront distribution that refers to this S3 bucket, with the origin response event set tot trigger a Lambda@Edge Node.js function to add in the security headers.
107. Improve the scalability of Beanstalk environment. Second Elastic Beanstalk worker tier environment and deploy the application process the asynchronous tasks there. Send the tasks should be decoupled from the original Beanstalk web server environment to the auto-generated SQS queue by the Beanstalk worker environment. Place a cron.yaml to the auto-generated SQS queue by the Beanstalk worker environment. Place a cron.yaml file within the root of the application source bundle for the worker environment for periodic tasks. Use environment links to link the web server environment with the worker environment.
108. New sprint item for deploying hotfix: Create a hot fix branch from the master. Create separate source stage for the hot fix in the production pipeline. Trigger the pipeline from the hot fix branch. Use Lambda to do a content scan and use CodeBuild to run unit tests. Manual approval stage that merges the hot fix branch into the master branch. 
109. Management team ait a large on-prem OpenStack environment to move non-production  environment. Contractual obligations, production workloads must remain on-premise (CIS) for hardening images. Configuration was developed using configuration management system. When a change is made, job in Jenkins is triggered to use the VM Import command to create an EC2 instance in VPC. Use lifecycle hooks to launch an Lambda function to create the AMI.
110. Target group and EC2 instances as targets. Create a listener on port 443 of the Application Load Balancer. Associate the newly created target group as the default target group. Select a dual stack IP address, create a rule in the security group that allows inbound traffic from anywhere.
111. Unintentionally attach Elastic IP address to an EC2 instance in production. No developer should be allowed to attach an Elastic IP address at any time. Attach an IAM groups associated with the Developers IAM group to deny associate-address permissions. Create a custom AWS Config rule to check whether an Elastic IP address is associated with any instance tagged as production, alert the Security team.
112. Node.js web application which that provides REST services to store and retrieve time series data. Single on-prem server access to local MyYSQL db. Following requirements: Reliably build, test, deploy new updates on a daily basis without downtime or degraded performance. Scalable app to meet an unpredictable number of concurrent users during the trial. Configure Beanstalk automatically build the application using CodeBuild and to deploy it to a test environment that is configured to support auto scaling. Create second Elastic Beanstalk environment for production. Use RDS to store data. When new versions pass all tests, use Beanstalk ‘swap cname’ to promote the test environment to production.
113. Blue/Green deployments for data driven decisions CloudFront with Lambda@Edge function  to set a cookie when CloudFront receives a request. Assign the user to a version A or B, then return corresponding version to the viewer.
114. Testing a web application runs on EC2 behind ALB. Instances run in ASG across multiple AZs. Blue/Green deployment with immutable instances. Ensure users remain logged in: Modify the application to store user session information in an ElasticCache cluster.
115. Company reviewing IAM policies: One policy written by the engineer has been flagged as permissive. Policy is used by an Lambda function that issues a stop command to E2 instances tagged with Environment: NonProductive. Current policy: Change: “Resource”: “*” to “Resource”: “areas:ec2:*:*:instance/*”. Add the conditional expression: “Condition”: {“ StringEquals”: {“ec2: resourceTag/Environment”: “NonProduction”.
116. Healthcare services run on EC2 behind an ELB. Troubleshoot problems on the web tier. Implement EC2 ASG groups with lifecycle hooks. Create Lambda function that can modify an EC2 instance lifecycle hook into a standby state, extract logs from the instance through a remote script execution, place them in S3 bucket for analysis.
117. Build project in CodeBuild. Automated tests of modules that access AWS services: Create service role in IAM to be assumed by CodeBuild with a policy attached to allow the actions AWS services. Configure the build project to use the role created.
118. Immutable environment updates to meet all the necessary requirements. Zero downtime while the deployment on going for the deployment. 
119. CodeBuild + CodeDeploy + CodePipeline to automatically to an EC2 instance. Perform security assessment. CloudWatch rules to monitor for CodeDeploy of a successful code deployment and configure events to trigger X-Ray.
120. Electronic health records is running a fleet of EC2 instances with Linux OS. Patient privacy requirements, the company must ensure continuous compliance for patches for operating system and applications running on the EC2 instances. System Manager to create new patch baseline including the custom repo. Execute the RunPatchBaseline document using the run command to verify and install patches. 
121. CodeCommit for source control to automate continuous integration and deployment pipeline on AWS in development environment. 3 requirements: Changes must go through unit testing, functional testing, code changes must automatically trigger the CI/CD pipeline. Trigger CodePipeline from the development branch. Make an individual stage in the CodePipeline for security review, unit test, functional tests and manual approval. CloudWatch Events to detect changes in pipeline stages and SNS for emailing.
122. Docker container to build an image-analysis. Spikes in traffic. Automatically scale the application in response to customer demand while maintaining cost effectiveness and minimising impact on availability. Deploy containers on Beanstalk environment. Configure Beanstalk to autoscale the environment based on CloudWatch metrics.
123. Multi stage pipeline CodePipeline to build verify stage test and deploy chat tool. Create Lambda function triggered by updating CloudTrail events. Subscribe Lambda function to the Amazon SNS topic and have it forward the event to the chat web hook URL.
124. Store the templates on S3. Use Service Catalog to create a portfolio of products based on those templates. Apply template constraints to the products with rules limiting VPCs available for deployments. Create IAM group for beginners giving them access to the portfolio. Create separate group for experts giving them access to the templates, CloudFormation and other services.
125. ECS Cluster: InsufficientCapabilitiesException when calling the CreateStack operation.  CloudFormation execution was not granted the capability to create IAM resources. The Engineer needs to provide CAPABILITY_IAM and CAPABILITY_NAMED_IAM as capabilities in the CloudFormation execution parameters or provide the capabilities in the AWS Management Console.
126. Retail Java based hosting on-prem. Move to AWS. Cost is important, engineer needs to ensure half of the fleet is available. LEAST amount of management overhead: Create Beanstalk java based environment ASG and Load Balancing. Configure the network options for the environment to launch instances across subnets in different AZs. Use “Rolling” as a deployment strategy with a batch size of 50%. 
127. Separate Pipeline in CodePipeline for each environment. Trigger each pipeline based on commits to the corresponding environment branch in GitHub. Add build stage to launch CodeBuild to create container image from the build file and push it to ECR. Add another stage to update the ECS task and service definition in the appropriate cluster for that environment.
128. Auditing analytics troubleshooting purposes data analytics application to collect all application and linux logs from EC2 instance before termination. Run 10000 instances in AutoScaling. Requires ability to quickly find logs based on instance IDs and date ranges. EC2 Instance-terminate Lifecycle Action. 
129. Large commercial website runs on EC2. Use Amazon Kinesis Data Streams to collect and process web logs. Kinesis consumer stream drop records before they can be processed. Fastest way to stream handling: scale Kinesis consumer application to run as a Lambda function. CloudTrail spans all AWS Regions and all read/write events, point this trail to an S3 bucket. Create Athena table and specify the S3 bucket ARN in the CREATE_TABLE query. Create Lambda function that accesses the Athena table using the SDK, performs SELECT ensuring WHERE clause includes userIdentity, eventName and eventTime. Compare the results against the user’s currently attached IAM access policies to determine any deltas. Configure the results against user’s currently attached IAM access policies to determine any deltas. Configure CloudWatch events schedule to automate this process run once a week. Configure SES to send a consolidated report to the team.
130. Disaster recovery: %1 of the requests should be routed to the secondary region to continuously verify system functionality. If there is a disruption in a service in the main region traffic should be automatically routed to the secondary region. Secondary region must be able to scale up to handle the traffic. Deploy the application to Beanstalk and use DynamoDB global tables for session data. Use Route 53 routing policy with health checks to distribute the traffic across the regions.
131. Cross region failover: Data storing at Aurora and RDS instances. Minimise the downtime by using RDS Event Notification to publish status updates to SNS topic. Use lambda function to the topic to monitor db health. In the event of failure, Lambda function promotes the read replica, updates Route53 to redirect traffic from the primary region to the secondary region.
132. Use RDS Event Notification to publish status updates to SNS topic. Use Lambda function subscribed to the topic to monitor database health. In the event of a failure, the Lambda function promotes the read replica, then updates Route53 to redirect traffic from the primary region to the secondary region.
133. EC2 instances behind Load Balancer. Instances run in an EC2 AutoScaling group across multiple AZ. HTTP 502 Bad Gateway errors from the application URL. Engineer can not work because EC2 instances closed shortly after being unhealthy. Add lifecycle hook to AutoScaling group to move instances in the Terminating state to the Terminating:Wait state.
134. EC2 instances attached IAM role receiving AccessDenied error while trying to access a SecureString resource in the SystemsManager.  Customer Master Key(CMK).  Set sim:GetParameter for the parameter resource in the instance role’s IAM policy. Kms:Decrypt for the instance role in customer managed CMK. Kms:Decrypt for the customer managed CMK resource in the role’s IAM policy.
135. Refactoring internal tools: Standalone Python code. No external state store or relational database. Use Docker for local development. When dependencies are changed and a new container is ready use CodePipeline and CodeBuild to perform functional tests and upload the new container to ECR. Use CloudFormation with the custom container to deploy the new ECS.
136. CodeBuild to build and package application. Packages are copied to a shared S3 bucket before being deployed across multiple accounts. Modify post_build to use —all public-read  and configure a bucket policy grants read access to the relevant accounts only.
137. Elastic Beanstalk: HTTP Client requests to a third party API. MySQL client library queries to an RDS DB. Instrument the application using the Xray SDK. On the Beanstalk management page for the application. Enable X-Ray daemon. View the trace the data in the Xray console.
138. InfoSec policy to all policies publicly accessible systems be patched with critical OS security patches within 24 hours. All instances are tagged with PatchGroup key to 0. Two new Systems Manager patch baseline for Windows and RHEL with ZeroDay delay for security patches of critical severity were created with an auto-approval rule. Patch group 0 has been associated with the new patch baseline. Create SystemManager Maintenance Window with a daily schedule and add a target with Patch Group 0. Add a task that runs RUnPatchBaseline document with the Install action. Create System Manager State manager configuration. Associate the RunPatchBaseline with the configuration and add a target with Patch Group 0.
139. All EBS volumes are attached to an EC2 instance to have Key Management Service(KMS) encryption enabled. Policy requires the EBS to be attached and deleted. Automate the detection and deletion of unencrypted EBS volumes. Create a rule in Config to check for unencrypted and attached EBS volumes. Subscribe Lambda function to the SNS topic that Config sends change notifications to. The Lambda function checks the change and deletes any EBS volumes that are non-compliant.
140. Implement a CI/CD for building and testing mobile apps. DevOps has been given the requirements: CodePipeline to orchestrate workflow. Test the app on real devices. Trigger notification. Start application binary in a different account. Make application binary accessible.
141. CodeCommit as the code source and CodeBuild to compile and package the application. Invoke Lambda to upload the application binary to a device farm for testing. Deliver the binary to the production S3 bucket. S3 bucket policy to allow public read on the production S3 bucket. Trigger notifications by using CloudWatch Events rule.
142. Write a bootstrap script to install the configuration agent, install the application framework, pull configuration data from S3, run the agent to configure the instance, deploy the application from S3.
143. Rule in Config to check for unencrypted EBS volume. Subscribe Lambda function to SNS topic that Config sends change notifications. Lambda function to change notification and deletes EBS volumes in that are non-compliant.
144. 144. Eight EC2 instances is relying on a third party API endpoint. More than 10 errors within a minute period: system must issue alert: CloudWatch logs agent on all instances to push logs to CloudWatch logs. Metric filter to generate a custom CloudWatch metric that records the number of failures and triggers a CloudWatch alarm if the custom metric reaches 10 errors in 1 minute period.
145. Several legacy applications all generate different log formats. Standardise the formates before writing them to S3 for querying and analysis. Lowest cost: Kinesis Agent on each server to upload the logs and have Kinesis Data Firehose use Lambda function to normalise the logs before writing them to S3. 
146. S3 to store proprietary information. Create buckets for new projects on a daily basis. All existing and future buckets have encryption logging and versioning enabled. No buckets should ever be publicly read or write accessible. Enable Config rules and configure automatic remediation using AWS Systems Manager documents.
147. Amazon EFS for checkpoint data. Use EC2 Fleet to launch EC2 Spot instances. Create a standard cluster AMI use the latest AMI when creating instances.
148. CodeDeploy to manage deployments. Integrate the GitHub with CodeDeploy. Most efficient way: CodePipeline that uses GitHub as a source provider and CodeDeploy as a deployment provider. Connect this new pipeline with the GitHub account and instruct CodePipeline to use web hooks in GitHub to automatically start the pipeline when a change occurs.
149. Implement monitoring for a workload on EC2 and RDS. Application logs and EC2 instances. Database logs and operating system metrics for the RDS. Install CloudWatch agent on the EC2 and configure the agent to send the logs and metrics to CloudWatch. Enable RDS monitoring and modify the RDS instance to publish database logs to CloudWatch logs.
150. Creation of capture logs for everything running in AWS account. Configure Lambda to send all logs to S3 bucket, create a dashboard report in QuickSight. Create S3 object lock legal hold on the S3 bucket. Deploy CloudWatch agent to all EC2 instances.
151. Configure IAM role for the Developers with access to CodeCommit and explicit deny for write actions when the reference is the master. Allow developers to use feature branches and create PR when a feature is complete. Allow an approver to use CodeCommit to view the changes and approve the pull request.
152. Use AWS Systems Manager Automation to update Linux AMI from the previous golden image, provide the URL for the scrip that will update the Chef agent, share only newly generated AMI with the departments’ accounts.
153. Re-create infrastructure using CloudFormation as part of company’s QA pipeline. For each QA run a new VPC in a single account. All VPCs must be peered with central management VPC to allow centralised logging. Company has existing CloudFormation templates to deploy VPC. Create Lambda that is invoked by CloudWatch Events rule when create VPC. Lambda function should check the source of the peering request, accept the request and update route tables for the management VPC to allow traffic to go over peering connection. Invoke custom resources, Create peering, Update route tables.
154. Deploy Lambda function that refreshes Trusted Advisor checks and configure CloudWatch Events rule to run Lambda function periodically. Create CloudWatch Events rule with an event pattern matching TrustedAdvisor events and a target Lambda function. In the target Lambda function notify Senior Manager.
155. Install CloudWatch agent on each EC2 instance. Configure the agent to push all logs to CloudWatch logs and set up CloudWatch metric filter that searches for user login. If login is found, send a notification to the security team.
156. Web application runs on EC2 behind ALB. Instances run in EC2 ASG across multiple AZs. Implement deployment strategy: CodeDeploy with a deployment group configured with blue/green config. Select the option Terminate original instances in the deployment group with a waiting period of 1 hour.
157. Set up ECS. Use CodePipeline to create a pipeline that is triggered on a commit to the GitHub repo. Use CodeBuild to create the container images and CodeDeploy to publish the container image to the ECS environment.
158. Container based application to EKS and establish automated email notifications. Notifications sent to each email address are for specific activities related to EKS components. 
159. CloudWatch AutoScaling lifecycle hook to pause configuration. Enable CloudWatch logs to log the EKS components. Create CloudWatch subscription filter for each component with Lambda as the subscription feed destination.
160. EC2 instances behind ALB. Application stores data in RDS MultAZ. Instance health check used by the load balancer returns PASS if at least one service is running on the instance. AWS CodePipeline with CodeBuild CodeDeploy to deploy the code to test and production environments. A new version was unable to connect to the DB server in the test environment. A new version was unable to connect to the db server in the test environment. One process was running, so the health checks reported healthy and the application was promoted to production, causing a production outage. Company wants to ensure that test builds are fully functional before a promotion to production. Manual approval action to the CodeDeploy steps to deploy code to test and production. Add manual approval action to the CodeDeploy pipeline that requires a Testing Engineer to validate the testing environment. Refactor the health check endpoint the Elastic Load Balancer is checking to better validate actual application functionality.
161. Single AWS region, new office on a different, users in the new office having high latency. Create new ALB and ASG resources in the new Region and configure the new ALB to direct traffic to the new AutoScaling group. Create Route53 records, health checks and latency based routing policies to route ALB. Convert the DynamoDB to a global table.
162. Remove unauthenticated access from the S3 bucket with a bucket policy. Modify the service role for the CodeBuild project to include S3 access. Use CLI to download the database population script.
163. API gateway with an Lambda function providing the backend functionality. Need to record the source IP and response status of every API call. Configure: API GW stage to enable access login, CloudWatch Logs choose existing log group. Grant API GW to read and write logs to CloudWatch through IAM.
164. Cloud based gaming has the task of formalising deployment strategies. Management tools should maximise the use of platform solutions where possible. Deployment in the form of Docker.
165. CodeDeploy new version: Misconfigured: Health checks specified for the ALB target group 
166. Store pass in Systems Manager as a secure string. Add to parameter store key to buildspec.yml file as an environment variable under the parameter-store mapping. Reference the environment variable to initiate scanning. Password protected endpoint. Sensitive information must be stored securely. Store the password in the System Manager Parameter Store as a secure string. Add the Parameter Store key to the buildspec.yml file as an environment variable under the parameter-store mapping. Reference the environment variable to initiate scanning. 
167. Ensure the IAM entity configs across multiple accounts in AWS Organisations are compliant with corporate IAM policies. Apply an SCP in Organisations to ensure compliance of IAM entities. Deploy AWS Config rules to all accounts in Organisations that match the corporate IAM policies.
168. Thousands of EC2 instances as well as hundreds of virtual machines on-premise systems to perform trouble shooting. Developers want to sign in to AWS instances to run performance tools, but are unable to due to the lack of a central console logging. Attach a role to all instances that contains the appropriate permissions. Create AWS manager managed instance activation. Install and configure System Manager Agent on on-premises machines. Enable Session Manager logging to S2 bucket. Direct Developers to connect to Session Manager only.
169. Checkout master and develop new features locally on a feature branch to keep the production-ready code isolated. Create CodeCommit repo and IAM group with permission to read/write changes to the repo. Add new team members to the group. Create CodeCommit repo and an IAM role with permissions to read/write changes to the repo. Attach IAM role to a single IAM user. Ensure each member of the team uses this IAM user.
170. Check out the master and develop new features locally on a feature branch to keep the production ready code isolated. Ask team members to review the changes before committing the changes locally. Create CodeCommit repo and IAM group with permissions to read/write changes to the repo. Add new team members to this group. Create CodeCommit repo and an IAM role with permissions to read/write changes to the repository. Attach this IAM role to a single IAM user. Ensure each member of the team uses this IAM user.
171. DynamoDB hosted webapp in AWS Region to store user information. Support increasingly global user base, application must run in a secondary Region and allow users to connect to their closest Region and fail over to the secondary Region. Convert Dynamo table to a global table, deploy the web stack in both Regions configure 53 to use a geoproximity routing policy with health checks.
172. E commerce company uses large number of EBS backed instances. Decrease manual work across all the instances, automate restart action when EC2 instance retirement events are scheduled. Setup Health CloudWatch Events rule to execute Systems Manager automation documents that stop and start the EC2 instance when a retirement scheduled event occurs.
173. Containerise all in-house-quality control applications. Company is running Jenkins on EC2 requires patching and upgrading in most maintainable manner. CodeBuild with artefact encryption to replace the Jenkins instance running on EC2. 
174. Reference the ECS cluster in AWS:AutoScaling:LaunchConfiguration resource of the UserData property.
175. CloudWatch Logs on ES and Kibana to view a dashboard for actionable insight. Restrict user access to Kibana by user. Create proxy with IAM, restrict access to Kibana. Create proxy with IAM, restrict access of the ES endpoint to the IAM user. Use Cognito to offer user name and password protection for Kibana.
176. WorkSpaces for each new user. Security team said WorkSpaces for new users are not consistently being tagged. Company policy requires all WorkSpaces be tagged with USERNAME after creation. CloudWatch Events pattern rule based on WorkSpaces with AWS API Call via CloudTrail event type. CreateWorkspaces operation, target Lambda function that will tag the workspace. Ensure CloudTrail is enabled in all Regions where WorkSpaces are created. Ensure CloudTrail is enabled in all regions.
177. Mission critical application to use AWS auto scaling. Single CodePipeline to deploy the application in parallel using single AWS CodeDeploy application and unique deployment group for each ALB-AutoScaling group pair.
178. Backup sensitive S3 bucket stored in S3 bucket with private bucket policy using S3 cross-region replication functionality. Objects need to be copied to target bucket in a different AWS Region and account. Create replication IAM role in the source account, Statements to the target bucket policy allowing the replication configuration and add statement to the target bucket policy allowing the replication IAM role to override ownership. Set AccessControlTranslation owner to destination in the replication configuration and add a statement to the target policy allowing the replication IAM role to override object ownership.
179. Run app on EC2 in AutoScaling. Several hours for team to discover. Notified by Auto Scaling group and SNS topic whenever a failed instance launch occurs.
180. EC2 on-prem config standardise patching across both environments. Patching happens during non-business. Physical machines into SystemManager using Hybrid Activations. Attach IAM role to instance, allow them to be managed by Systems Manager. Maintenance Windows to schedule a patch window. 
181. CloudFront to cache web application static and dynamic content. Process new ratings ALB to cache content in Amazon ElasticCache, honouring the HTTP cache headers. Process new ratings and comments asynchronous using SQS.
182. EC2 instance running in AutoScaling register private IP with a monitoring system. Monitoring perform health checks by sending ping requests and alerts if instance becomes non-responsive. Define CloudWatch Events target, Lambda function and a lifecycle hook attached to the AutoScaling group. Configure CloudWatch Events to invoke the Lambda function which removes the entry of the private IP from the monitoring system upon instance termination.
183. EC2 behind LoadBalancer is deployed using Beanstalk. Application health checks were passing on all instances. Log analysis shows the errors caused by user requests being processed by two different versions of the application behind the same load balancer. Analysis shows a recent change made the responses backward incompatible. Update Beanstalk to deploy using the rolling with additional batch method.
184. Use Beanstalk to host the application. Store zipped version of the application in S3 use that location to deploy new versions of the application using Elastic Beanstalk to manage the deployment options. 
185. Use CodeDeploy with AutoScaling and Elastic Load Balancer. Use blue/green deployment strategy. Enable Elastic Load Balancing health check to report the status of the application, set AutoScaling health check to ELB. 
186. Store container images in ECR. Use CodePipeline to trigger a deployment if new version is created. Use CodeDeploy to deploy image to Fargate.
187. Create IAM to allow developers to provision the required resources. Attach the policy to the Developer role.
188. Stop using EC2 key pairs for SSH access. Use System Manager Session Manager: enhance security, take place over a private network only. Attach IAM with necessary Systems Manager to the existing IAM instance profile. Create VPC endpoint for Systems Manager in the desired Region.
189. If the new AZ has not been added to the ALB: AZ will not receive any traffic.
190. Modify buildspec.yml for the compilation stage to require manual approval before completion. Update the pipeline to direct trigger  the REST API for the automated penetration testing.  
191. Build an artefact place it to S3 clear when deployment occurs. Download artefact from S3 unzip to complete the deployment. Migrate CI/CD to stop and roll back when failure occurs. Track progress of the deployment:  Clear user data for each EC2, deploy and test application if not successful test it again. Code build the artefact and place it in s3. Code deploy to deploy the artefact to ec2 instance. Systems manager to fetch the artefact from s3 and deploy to instances.
192. CloudFront distribution in front of web servers and modify the application to upload to S3 using TransferAcceleration.
193. CrossRegion RDS read replica in the new standby. Migrate DB to DynamoDB
194. ECS container run behind Application Load Balancer as the web tier of three tier. Acceptance criterion for successful deployment is the verification that the web tier can communicate with the db and middleware tiers of the application upon deployment. Create health check endpoint in the web application that tests connectivity to the data and middleware tiers.
195. AMazon ECS cluster along with EC2 instances an ALB. Select rolling update as a deployment strategy. Add Docker health check within the task definition to ensure rollback if the health check fails.
196. Inspector to install SystemsManagerRunCommand, SystemManagerPatchManager. CloudWatch agent to schedule Inspector runs. 
197. Us.example.com with failover routing: EU ALB primary EU ALB secondary. 
198. Instance to EC2->ASG group with the minimum, maximum and desired capacity set to 1.
199. CloudFormation to create EC2 includes the user-data property for the EC2 resource. Add a command in user-data to retrieve the application metadata from S3.

200. Migrate legacy app to AWS and develop pipeline that uses AWS only. CodeCommit using AWS CLI. Clone the Git repo directly to CodeCommit using the CLI. Validate that files were migrated publish the CodeCommit repository. 
201. Run CloudWatch Events rule every 5 minutes to invoke Lambda function that checks to see if the compromised tag for any kaccess key is set to true. If so, notify the security team and disable the access keys.
202. Minimal effort data at rest. S3-bucket-server-side-encryption-enabled managed rule that checks for that does not explicitly deny put-object requests without server-side encryption. Add the AWS-EnabledS3BucketEncryption remediation action to the AWS Config rule to enable default encryption on any S2 buckets that are non compliant. 
203. Multi region disaster recovery  solution for new application. App consists of EC2 instances running in Auto Scaling group and Aurora MySQL DB cluster. Application must be available with an RTO 120 minutes and RPO of 60 minutes. Launch Aurora DB cluster as Aurora Replica in different Region. Create CloudFormation template for all compute resources and create stack in two regions. Write script that promotes the Aurora Replica to the primary instance in the event of a failure.
204. EBS spend has increased over time. Unattached EBS volumes: Use EC2 and Data Lifecycle Manager to configure a volume lifecycle policy. Set the interval period for unattached EBS volumes to 14 days and set the retention rule to delete. Set the policy target volumes as *.
205. 60 second grace period after 200 response code: Increase the grace period from 60 seconds to 180 seconds, consecutive health check requirement from 2 to 3.

206. Launch Aurora DB cluster as an Replica in a different Region. Create CloudFormation template for all compute resources and create a stack in two regions. Write a script that promotes the Aurora Replica to the primary instance in the event of a failure.

207. EC2 and DataLifeCycle manager to configure a volume lifecycle policy. Set the interval period for unattached EBS volumesto 14 daysand set the retention rule to delete. Set the policy target volumes as *.

208. Increase instance grade period from 60 seconds to 180 seconds, and theconsecutive health check requierement from 2 to 3.

209. SecretsManager::Secret resource type. Referencethesecret resource return attributes that need password, such as RDS DB. Sensitive static data in the Systems Manager Parameter Store as strings. Reference the stored value using types of Systems Managerparameters. Use KM to encrpt the CloudFormation template.

210. Install System Manager Agent to capture logs and view login activity in the CloudTrail console.

211. CloudWatch Events rlefor themaster branch to trigger the pipeline.
212. Scheduled CloudWatch Events to targeta custom Lambda function runs Trusted Advisor checks. Creatsecond CloudWatch Events rule tofilter eventsfrom Trusted Advisor to trigger Lambda function to stop idle non-production instances and send notifications. 

213. Upload application as Docker image that contains all the necessary software to Amazon ECR. Create an ECS cluster using Fargate launch type and an Auto Scaling group. Create AWS CodePipeline that uses ECR as a source and ECS as a deployment provider.
214. CloudFormation StackSets with approved CloudFormation templates.
215. CloudWatch logs from EC2 to S3. CloudTrail to deliver theAPI  and S3 use Reshift to query.
216. Create multiple AZ add LoadBalancer to split. Replace the NAT  withNAT gateway in each AZ. Update route tables.
217. ContinueUpdateRollback from CloudFormation console
218. Manually adjust theresources to match theexpectations of the stack.
219. Enable available memory consumption with CloudWatch ii
220. Cognito identity pool using Facebook as the identity provider.Obtain tepmorary AWS credentials so a user can access S3.
221. Amazon Cognito pool using facebook as id provider.
222. SQS queue and server side encryption.
223. ElasticCache deliver mapping content
224. CLoudTrail to detech when CLoudFormation has changed.
225. Ensure Lambda function code returns a response to the pre-signed URL.
226. Refresh cache for storage gw. CloudWatch events(Eventbridge)
227. Organisation SCP with explicit deny CreateAccessKey actions with a condition that excludes StringNotEquals for aws:username with a vale of the exception list.
228. Cross region endpoint CloudTrail run Lambda to promote the replica and modify the endpoint to point to new instance.
229. buildspec.yml to the source code with build instructions, GitHub webhook to trigger a build, CodeBuild project with GitHub.
230.IAM user does not have the permission to interact with the CodeDeploy endpoint.
231. Create application to test health and execue the script during BeforeIntstall lifecycle hook in the CodeDeploy appspec.yml. Update the CodeDeploy group to roll back based on custome CloudWatch alarm. 
232. CodeDeploy to push new versions.
233. JSON YAML CodeDeploy AppSpecfor new versions.
234. AWS RunShellScript to copy files from Git to S3. Use awsdownloaContent plugin with sourceTYpe of S3.
235.CloudFormation:DriftDetection
236.2 region Aurora and multiple regions alb.
237.Restore DB for every 2 hours.
238.Latency based routing and health checks.Configure api to fwd request to lambda in the region. configure lambda to retrieve and update the data in a dynamo global table.
239.CAnary testing with few users
240.S3 cross region replication RDS to a secondary region.
241.CloudWatch metric filter alarm for KMS with error message. re-enable key if necessary.
242.Update attached IAM to allow access to KMS key from the CodeDeploy role where the application will be deployed.
243.RPO: recovery point objective, RTO: recovery time objective.
244.RDS automated backups, failover change DNS recording.
245.CodeCommit, SAM, CodeDeploy
246.SDK handles rotating API keyse with EC2 MetaData service.
247.10 minute window scale up and down to load within 10 minute window. after peaks begin to see problems in config.
248.Cleanup EC2 resources within config. Script run daily a cron job on EC2 and executes API describe calls of the AutoScaling group and removes terminated instances from the configuration management system. Small script that run is during  EC2 instance shutdown to de-register the resource from the configuration management system.
249.Health check in place is not sufficient evaluation the applicaiton function.
250.CloudWatch Logs Agent, CloudWatch logs group. Cloudwatch logs group and define metric filters that capture 500 Internal Server Errors. Set CloudWatch alarm on that metric. Use Simple Notification Service to notify an on-call engineer when CloudWatch alarm is triggered.
251.Redploy application behind load balancer uses AutoScaling groups, new identical ASG, associate it to load balancer. Deploy desired number of instances on the old Auto Scaling group to zero, when all instances are terminated delete the old AutoScaling group.
252. Place each developers private key to S3 bucket use instance profiles and configuration management to create user account for each developer on all instances, place the user's public keys into the appropriate account. 
253. EBS volumes have been pre-warned by reading all the blocks berore the test.
254. Use SNS to create notification on S# objects automatically updates new Dynamo table to store all metadata about the new object. SUbscribe the applicatin to SNS topic to update its internal S3 object metadata cache from Dynamo table.
255. Post the log data to Kinesis and subscribe log-processing application oso it is configured to process logging.
256. Configure ASG to increase size of EMR.
257. Container command within Banstalk configuration file to eceute the script, ensuring "leader only" is set.
258. Syntax and build tests on the continuous integratoin system before launching the new EC2 and integration tests.
259. Add read replicas have direct read queries. Use ElasticCache in front of RDS to cache, Shard dataset among multiple DB instances.
260.Authenticate users at application level, use Securty token (STS) to grant token-based authorization to S3 objects.
261. Key based naming scheme comprised from the user IDs for all user objects in a single S3. 
262. SQS: complaining number of failed calls. Enable termination protection while it processes atask  and disable it when the processing is complete.
263. CloudFormation create CloudWatch LogsGroup and send the operating system and application logs of interest using the CLoudWatch Logs Agent. using configuration management, set up remote logging to send event to Kisesis and instert these into CloudSearch or Redshift, depending on available analytic tools. Using CloudFormation create CloudWatch LogGroup because CloudWatch Log agent automatically sends all operating system logs, only have to configure the application logs for sending off-machine.
264. Seperate CloudFormation template into a nested tructure that has individual templates for the security stacks for the application template that you control.
265.CloudWatch logs  agent on AMI, set up SNS for CloudWatch metrics triggers the CLoudWatch monitoring agent to backup all logs on the ephemeral drive.
266.Increase in the monthly bill from AWS increased cost. Determine exact cause of this increase. Review billing report, notice increase in the data transfer cost. Provide management with a better insight into data transfer use. Custom metrics to CloudWatch per application that breaks down application data transfer into multiple, more specific data points.
277.Mora data points to show management by CloudWatch.
278.Increasae AutoScaling groups' number of max servers. Push custome metrics to CloudWatch for your application that include more detailed information about your web application such as how many requests it is handling how many are waiting to be processed.
279.Upward trend for slow customer page load time.Ensure customer is not effected by too many requests. Redeploy infrastructure using CloudFormation, Beanstalk, Auto Scaling. Set up AutoScaling group policies to scale based on the number of requests per second as well as the current customer load time.
280.SNS topic to integrate customer emails. Another SNS topic to configure CloudWatch alarms. HTTP subscriber to this topic that notifies application via HTTP POST when alarm is triggered. SDK tools to integrate application with SNS and send messages to the correct team topic when on shift.
281.Ship the logs to Kinesis stream and have consumers analyze logs in live manner.
282.S3 bucket policy with condition statement requieres MFA. Amazon Identity and Access Management role with authorization to access the 53 bucket and launch all of application's EC2 instances with this role.
282.AutoScaling policy CPU Utilization CloudWatch metric. RDS Multi-AZ deployment.
283.Blue/Green deployment with new C2 instances carry out the deployment seitch DNS over to the new load balancer using route 53 after testing.
284. High availability and zero downtime. Redeploy app to Beanstalk. Create new version of appliation, create new environment running the version in Beanstalk. Take advantage of Beanstalk SWAP CNAME operation to setich to the new environment.
285. CloudSearch domain for API call logs. Configure search domein so it can be used to index API cll logs for thesearch tool. CloudTrail logs in S2. SNS "log notificaiton" topics. Subscribe SQS queue to the topics. Beanstalk application in worker role uses SQS queue to facilitate batch processing new API call log files retrieved from S3 bucket into a search index.
286."BlockDeviceMapping" option at EC2, snapshot to use for the block device in AutoScaling launch configuration.
303.Describe AutoScalingInstances API call on the AutoScaling group, iterate over the members using describe instances API call, remotely connect to each EC2 instance then run integration tests. Set up custom CloudWatch metric with the output of your integration tests run by a scheduled process on each instance enters the InService state.
304.Store IAM credentials in EC2 user data for each instance, then simply get the object from S3, because default is teh current version.
305.AMI with the application configured. New auto scaling conig using the new AMI, configure Auto Scaling group to launch this AMI. Use the history of past scaling events for similar event sales to predict future scaling requierements. use AutoScaling scheduled scaling feature to vary the size of the fleet.
306.new cloudwatch alarm basedon a custom metric streaming from the RDS MySQL instance that triggers an AutoScaling action to scale the application tier. EC2 user data script that installs logs agent on new launched instances. Agent will be configured to stream the file transfer log tile.
307.multi tier windows based web app. rds instances, load balancer behind route53. cost effective rolling deployment solution for the web application. Redeploy application using CloudFormation template. CloudFormation rolling deployment policies, create new policy for CloudFormation stack. Initiate an update stack operation to deploy new code.
308. redeploy using cloudformation template. use cloud formation rolling deployment policies, create new policy for cloud formation stack and initiate update stack operation to deploy new code.
309.Redeploy using OpsWorks stack use OpsWorks auto rollback feature to initiate rollback during failures.
310. High traffic application running behind load baclancer wih clientes very sensitive to latency. Elastic Compute Cloud applicatoin causing increased latency to replace. By using load balancer access logs.
311. Define AWS:CloudFormation:CustomResource in the template with the application version as one of its properties. Modify the CMDB to subscribe to the resource's creation and update notifications
312. CLoudFormation to describe environment. Configure input parameter for the master server hostname/address, use this parameter within EC2 UserData script that registers the agent with the master.
313. Large data migration from: data pipeline to export RDS and import into Dynamo.
314.EC2 UserDat script to copy configurations.
315.Elastic Beanstalk rolling deployments. CloudFormation template with Autoscaling group.
316. Control S3 bucket control list. Cross account TAM.
317. Setup AutoScaling for application tier as the origin for distribution. Use multiple RDS read replicas.
318. Create second Beanstalk environment and swap the CNAMEs.
319. CloudFront distribution to forward a cookie specific to this feature. For requests where the cookie is not set the web servers use its value to determine whether the feature should be on or off for the response.
320. WaitConditionHandle lo leverage AWS SDK to run the DescribeStacks API call until CREATE COMPLETE status is reurned.
UserDataHandle for the output of a Userdata command to do sanity check of the post install state and run integration tests on the state of multiple ters through the load balancer to the application.
321.Create cross account IAM role with policy that granst read only access to the S3 bucket requiered by the application to the AWS account ID running production SaaS application.
322. new autoscaling launch configuration new instance type associate to the existing group terminate running instances. chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
33. chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
331. . chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
331. . chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
331. . chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
331. . chane instance type in cloud formation template that was used to crete the ec2 instance then update the stack.
323.compound ec2 tags for metadata items, multiple items are joined together in individiual tags, associatethem with the EC2 instances, access metadata by using the ec2 describe tags.dynamo db table to hold the metadata. access the metadata by querying metadata.
324.ASG lifecycle hook to hold instance in a terminating:wait state until you have completed any troubleshooting. When you have completed troubleshooting, wait for the terminating state to expire , or notify to Scaling to complete the lifecycle hook and terminate the instance.

325. place fleet of slave nodes in scaling group. configure cloud watch alarm to trigger group policy to launch when runningbuildjobs is greater than 45 or more than 5 minutes.
Place slave nodes in scaling group. configure cloud watch alarm triggers an auto scaling policy to terminate ec2 instances when build jobs is less then 40 or more than 5 minutes.

326.Parse security groups in each region, evaluate vpc network access control lists.
327.SimpleWorkflowService use different set of workers for each task to prevent 2 times charged credit cards.
328.analyze application logs to identify possibe reasons for mesage processing failure and resolve the cause fr failures. 
329. change auto scaling group config to use larger instances and include multiple az's instead of one.
330. deploy new applicatoin component as an beanstalk application, read the data from the social media sites, store it in dynmodb use apache hive with mapreduce for analytics.
335. Centralised test server hosts an automated browser testing framework. CloudFormation custom resource to notify the centralized test server via SNS topic, that a new environment has been initialized. The centralised test server can then execute the tests before sending the results back to the CloudFormation.
336. update html, css, js for the frontend to S3 bucket. create cloud front distro with this bucket as its origin. beanstalk to deploy nodejs application. Launch Redshift cluster and point to its JBDC endpoint.
337. add cloudformation wait condition that depends on the web server resource. When the UserData script finishes on the web servers, use curl to signal to the WaitCondition pre-signed URL that they are ready. Add an Cloudformation wait condition that depends on the web server resource. when the user data script finishes on the web server, use the command "cfn-signal" that they are ready.
338. update cloud formation configuration to take advantage of auto scaling groups. configure an auto scaling group policy to trigger off you custom cloud watch metrics. create custom cloudwatch metric that you push your jvm memory usage to. create cloud watch alarm that triggers an SNS notification to page your team when the application memory usage becomes too large.

339. 2 servers in each AZ's a through e, inclusive.
340. code Parameter code for environment and add condition on the route 53 code.
340. Identity provider like google or facebook to exchange for temporary security credentials.
341. D. DynamoDBtablewithroughlyequalreadandwritethroughput,withElastiCachecaching.
342.Model the stack in 3 CloudFormation templates: Data layer, compute layer and networking layer. Write stack deployment and integration testing automation following Blue-Green methodologies.
343.BlueGreen for zero downtime deploys. Use DynamoDB and neither OpsWorks nor Beanstalk directly supports DynamoDB, option selecting CloudFormation and Bluereen is correct. Scope of an EBS shot is Region.
344. System did not include repair logic and request replay buffering logic for post-failure, to resynchronize data to the Region that was unavailable for a number of hours.
345. Multi-region multi-master, active-active RDS configuration using application control-level BASE design principles with change-stream wrtie queue buffers for replication.
346.LocalSecondaryKey properties: Only sort key can be different from the table.
347.Pre-baking AMI with all code and cofiguraion on deploys
348.fastest possible rollback times in the event of a failed eployment.
349.Which of the following are not valid resource for OpsWorks custom cookbook repositories.
350.EBS is not valid for cookbook repo.
351.If NAT fails private subnet fails, deployment fail.
352.BYO license Oracle.
352.Max speed 320 MiB/s
353.Unmount the volume first.
354.Create EBS volume from existing snapshot. Size10GB. Create a volume of 30G from the snapshot. Yes.
355.resize2fs:
356. SQS keeps messages 4 days.
357. df -f empty volume is not mounted.
358. Amazon SQS: 8 kb.
359. Maximum time messages can be stored in SQS.
360. DynamoDB secondary index is data structure contains a subset of attributes from a table, alons with an alternate key to support query operations. No step is required the user can directly mount the device.
361. bid on spot instances just above the asking price as soon as new commits come in, perform all instance confiuration and setup then create AMI based on the spot instance.
362. Global Secondary Key properties: Partition ke and sort key can be different from the table.
371. use SQS queue and set the visibility tieout to long enough for jobs to process.
372.use a long poll instead of short polls.
373.CloudWatch + Billing Alarm + Lambda, when the threshold is exceeded email the manager.
374.Vendor access to AWS account. Read protected messages in a private S3 bucket at leisure. Create cross-account IAM with permission to access the bucket, grant permission to use the role to the vendor account.
375.request for limit increase on lambda function executions.
376. more frequent snapshots or EBS faster becuase only the blocks on the device have changed after last snapshots are saved in the new snapshot.
377. Blocks in EBS volumes are allocated lazily, while logically seperated from other EBS volumes, often share the same physical hardware. Snapshotiting the first time forces full block range allocation so the second snapshot does not need to perform the allocation phase and is faster.
378. Snapshots are incremental so only blocks on the device that have changed after last snapshot are save in the new snapshot.
379. UPDATE_ROLLBACK_FAILED: UpdateStack calls.
380. 5556 : DynamoDB partition key.
381. Use CloudTrail LogFile Integrity validation.
382. is not pseudoparameter: StackARN.
383. scope of the EBS : Availability Zone.
384. GameID or equivalent identifier as the primary partition key for the table.
385. Game ID or equivalent identifier as the primary partition key for the table.
386. GameID or equivalent as the primary key for the table.

387. Review CloudWatch metrics graph to determine hich components slowed the system down.
388. Fn::split . custom resources using Lambda and Code.ZipFile allow inline nodejs resource.
389. Create Route53 Latency Based Routing Record with Failover and point it to two identical deployments of your stateless API in two different regions. Make sure both regions use AutoScaling groups behind ELB.
390. Create Route53 Latency based routing record with failover and point it two identical deployments of your stateless API in two different regions. Make sure both regions use AutoScaling groups behind ELBs.
391. Mountable disks and filesystem, so you can not use the S3. Need persistance so use EBS. Lowcost storage as possible and access is not frequent or high throughput, mostly sequential reads. Most appropriate EBS: standard.
392. Custom resource type by implementin create update delet functionality subscribe custom resource provider to SNS topic, implement logic in AWS Lambda.
393. Large AWS Directory Service AD Connector.
394. Spot instances you can allocate in stack layer.
395. cfn-request cloud formation helper script.
396. Kinesis as a buffer and transport mechanism for API call events.
397. Ruby on Rails application for internal non production use MySQL as a database. Developers with severe experience to be able to deploy: Beanstalk.
398.
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
update
